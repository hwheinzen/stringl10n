// Copyright 2021 Itts Mee. All rights reserved.
// Use of this source code is governed by a license
// that can be found in the LICENSE file.

// THIS FILE HAS BEEN GENERATED BY l10n using l10n.json.
// ON 2021-06-01 10:03:10.640281681 +0200 CEST. DO NOT EDIT.
// CHANGES WILL DISAPPEAR AFTER NEXT RUN OF l10n.

/*
 l10n_generated.go contains all localized strings and
 functions for translating (L10nTranslate),
 replacing text/template variables (L10nReplace),
 and a conveniance function for localizing errors (L10nLocalizeError)
*/

package main

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"strings"
	"text/template"

	. "github.com/hwheinzen/stringl10n/mistake"
)

// Type l10nPair is used during string localization.
type l10nPair struct {
	Lang  string
	Value string
}

// l10nMap contains all key strings with all their translations.
var l10nMap = make(map[string][]l10nPair, 10)

// L10nTranslate returns the adequate translation of a given text
// according to the chosen language code or an error.
func L10nTranslate(key, lang string) (string, error) {
	fnc := "L10nTranslate"

	pairs, ok := l10nMap[key]
	if !ok {
		err := errors.New("L10N:no entry for '" + key + "'")
		return "", fmt.Errorf(fnc+":%w", err)
	}
	for _, v := range pairs {
		if len(lang) >= 5 { // assuming POSIX locales: language + country
			if v.Lang == lang[:5] {
				return v.Value, nil // found
			}
		}
	}
	for _, v := range pairs {
		if len(lang) >= 2 { // assuming POSIX locales: language only
			if v.Lang == lang[:2] {
				return v.Value, nil // found
			}
		}
	}

	err := errors.New("L10N:no " + lang + " translation for '" + key + "'")
	return "", fmt.Errorf(fnc+":%w", err)
}

// l10nVars declares all variables possibly needed for substitution.
type l10nVars struct {
	Info string
}

// L10nReplace replaces text/template expressions and returns
// the changed text string. Variables in these text/template
// expressions are substituted by values or an error.
func L10nReplace(tmpl string, vars []struct {
	Name  string
	Value interface{}
}) (string, error) {
	fnc := "L10nReplace"

	t := template.New("t")
	_, err := t.Parse(tmpl)
	if err != nil {
		e := errors.New("L10N:error parsing template:\n'" + tmpl + "'\n")
		return "", fmt.Errorf(fnc+":%w:"+err.Error(), e)
	}

	allVars := l10nVars{}

	for _, pair := range vars {
		switch pair.Name {
		case "Info":
			v, ok := pair.Value.(string)
			if !ok {
				err = errors.New("L10N:variable 'Info' should have type string but has " + fmt.Sprintf("%T", pair.Value) + " in template:\n'" + tmpl + "'\n")
				return "", fmt.Errorf(fnc+":%w:", err)
			}
			allVars.Info = v
		default:
			err = errors.New("L10N:variable '" + pair.Name + "' not declared for template:\n'" + tmpl + "'\n")
			return "", fmt.Errorf(fnc+":%w", err)
		}
	}

	var b bytes.Buffer
	err = t.Execute(&b, allVars)
	if err != nil {
		e := errors.New("L10N:error executing template:\n'" + tmpl + "'\n")
		return "", fmt.Errorf(fnc+":%w:"+err.Error(), e)
	}

	return b.String(), nil
}

// L10nLocalizeError takes the innermost wrapped error of in and tries
// 1. to translate the error message and
// 2. to replace text/template expressions with variable values if available.
// It creates a new error and returns it wrapped again.
//
// If 1. fails it returns two nil errors indicating "NOTFOUND".
// If 2. fails it return nil as out and an error.
func L10nLocalizeError(in error, lang string) (out, err error) {
	fnc := "L10nLocalizeError"

	// Unwrap
	var inner, e error
	var ss []string
	for inner, e = in, errors.Unwrap(in); e != nil; inner, e = e, errors.Unwrap(e) {
		ss = append(ss, strings.Replace(inner.Error(), e.Error(), "%w", 1))
	}
	ss = append(ss, inner.Error())

	// Translate
	txt, err := L10nTranslate(inner.Error(), lang)
	if err != nil {
		return nil, nil // notfound, ignore why
	}

	// Substitute
	type varser interface {
		Vars() []struct {
			Name  string
			Value interface{}
		}
	}
	f, ok := inner.(varser)
	if ok {
		txt, err = L10nReplace(txt, f.Vars())
		if err != nil {
			return nil, fmt.Errorf(fnc+":%w", err)
		}
		out = Err{
			Fix: txt,
			Var: f.Vars(),
		}
	} else {
		out = Err{Fix: txt}
	}

	// Wrap again
	for i := len(ss) - 1; i != 0; i-- {
		out = fmt.Errorf(ss[i-1], out)
	}

	return out, nil
}

// init fills the translation map.
func init() {
	fnc := "init"

	var l10nJSON = `{
 "EXAMPLE:complex error with '{{.Info}}'": [
  {
   "Lang": "en",
   "Value": "complex error with '{{.Info}}'"
  },
  {
   "Lang": "de",
   "Value": "komplizierter Fehler mit '{{.Info}}'"
  }
 ],
 "EXAMPLE:simple error": [
  {
   "Lang": "en",
   "Value": "simple error"
  },
  {
   "Lang": "de",
   "Value": "einfacher Fehler"
  }
 ]
}`

	err := json.Unmarshal([]byte(l10nJSON), &l10nMap)
	if err != nil {
		e := Err{Fix: "L10N:error unmarshaling 'l10nJSON'"}
		log.Fatalln(fnc+":%w:"+err.Error(), e)
	}
	l10nJSON = "" // no longer needed
}

// THIS FILE HAS BEEN GENERATED.
// DO NOT EDIT.
// CHANGES WILL DISAPPEAR AFTER NEXT RUN OF go generate.
